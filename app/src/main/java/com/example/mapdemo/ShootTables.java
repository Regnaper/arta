package com.example.mapdemo;

import static java.lang.Math.round;

class ShootTables {
    static int[][] of45_4p = {
            {200, 5, 31, 79, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
            {400, 12, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
            {600, 18, 0, 0, 0, 0, -1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
            {800, 25, 0, 0, 0, 0, -1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
            {1000, 32, 0, 0, 0, 0, -1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
            {1200, 39, 0, 0, 0, 0, -1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
            {1400, 46, 0, 0, 0, -1, -1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
            {1600, 53, 0, 0, 0, -1, -2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
            {1800, 61, 0, 0, 0, -1, -2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
            {2000, 69, 0, 0, 0, -1, -2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
            {2200, 77, 0, 0, 0, -1, -2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
            {2400, 84, 0, 0, 0, -1, -2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
            {2600, 93, 0, 0, 0, -1, -3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
            {2800, 101, 0, 0, 0, -1, -3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
            {3000, 109, 0, 0, 0, -1, -3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 100},
            {3200, 118, 0, 0, 0, -2, -3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 100},
            {3400, 127, 0, 0, 0, -2, -3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 100},
            {3600, 136, 0, 0, 0, -2, -3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 100},
            {3800, 145, 0, 0, 0, -2, -4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 100},
            {4000, 154, 0, 0, 0, -2, -4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 200},
            {4200, 163, 0, 0, 0, -2, -4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 200},
            {4400, 173, 0, 0, 0, -2, -4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 200},
            {4600, 182, 0, 0, 0, -2, -4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 200},
            {4800, 192, 0, 0, 0, -3, -4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 300},
            {5000, 202, 0, 0, 0, -3, -4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 300},
            {5200, 213, 0, 0, 0, -3, -4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 300},
            {5400, 223, 0, 0, 0, -3, -5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 400},
            {5600, 234, 0, 0, 0, -3, -5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 400},
            {5800, 244, 0, 0, 0, -3, -5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 400},
            {6000, 255, 0, 0, 0, -3, -5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 500},
            {6200, 266, 0, 0, 0, -4, -5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 500},
            {6400, 278, 0, 0, 0, -4, -5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 600},
            {6600, 289, 0, 0, 0, -4, -5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 600},
            {6800, 301, 0, 0, 0, -4, -5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 700},
            {7000, 314, 0, 0, 0, -4, -6, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 700},
            {7200, 326, 0, 0, 0, -5, -6, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 800},
            {7400, 339, 0, 0, 0, -5, -6, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 800},
            {7600, 352, 0, 0, 0, -5, -6, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 900},
            {7800, 366, 0, 0, 0, -5, -6, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1000},
            {8000, 380, 0, 0, 0, -5, -6, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1000},
            {8200, 395, 0, 0, 0, -6, -6, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1100},
            {8400, 410, 0, 0, 0, -6, -6, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1200},
            {8600, 426, 0, 0, 0, -6, -6, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1300},
            {8800, 442, 0, 0, 0, -7, -7, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1400},
            {9000, 459, 0, 0, 0, -7, -7, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1400},
            {9200, 478, 0, 0, 0, -7, -7, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1500},
            {9400, 498, 0, 0, 0, -8, -7, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1600},
            {9600, 519, 0, 0, 0, -8, -7, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1800},
            {9800, 543, 0, 0, 0, -9, -7, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1900},
            {10000, 569, 0, 0, 0, -9, -8, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2000},
            {10200, 600, 0, 0, 0, -10, -8, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2200},
            {10400, 640, 0, 0, 0, -11, -8, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2400},
            {10600, 715, 0, 0, 0, -13, -9, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2800},
            {10609, 740, 0, 0, 0, -14, -9, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2900}};

    static double getFromShootTables(int[][] table, int column, int distance) {
        int dis = distance/200*200;
        int d = findNumberInMass(table, dis);
        return interpolation(distance, table[d][column], table[d+1][column]);
    }

    private static int findNumberInMass(int[][] incomingMass, int needFind) {
        // проходим по циклу от первого элемента до "последнего"
        for (int i = 0; i < incomingMass.length; i++) {
            // если число найдено - цикл прерывается и возвращается номер позиции
            if (needFind == incomingMass[i][0]) {
                return i;
            }
        }
        //если в массиве нет нужного элемента - возвращаем 0
        return incomingMass.length - 2;
    }

    private static double interpolation(int d, int first, int second) {
        d %= 200;
        int percent = round(d / 2);
        return first + (((second - first) * percent) / 100);
    }
}